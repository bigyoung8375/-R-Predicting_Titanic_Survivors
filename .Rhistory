df_test2 = df[idx2$Resample1, ]
df_train2 = df[-idx2$Resample1, ]
idx2 = caret::createDataPartition(Default$default, p = .8)
df_test2 = df[idx2$Resample1, ]
df_train2 = df[-idx2$Resample1, ]
dim(df_test2)
dim(df_train2)
df_train = df[train_idx, ]
df_test = df[test_idx, ]
dim(df_train)
dim(df_test)
idx2 = caret::createDataPartition(Default, p = .8)
df_test2 = df[idx2$Resample1, ]
idx2 = caret::createDataPartition(Default$default, p = .8)
df_test2 = df[idx2$Resample1, ]
df_train2 = df[-idx2$Resample1, ]
dim(df_train2)
dim(df_train2)
ggplot_sex <- ggplot(train_df, aes(x = Survived, fill = Sex)) + geom_bar() + ggtitle("성별에 따른 생존여부")
# 성별에 따른 생존여부
install.packages("ggplot2")
install.packages("ggplot2")
library(ggplot2)
ggplot_sex <- ggplot(train_df, aes(x = Survived, fill = Sex)) + geom_bar() + ggtitle("성별에 따른 생존여부")
setwd("C:/Users/Samsung/Desktop/빅분기실기준비/타이타닉 생존자 예측")
list.files()
test_df <- read.csv("test.csv")
train_df <- read.csv("train.csv")
# 성별, 생존, Embarked(승선한 곳) facotr형으로 변환.
train_df$Sex <- as.factor(train_df$Sex)
train_df$Embarked <- as.factor(train_df$Embarked)
train_df$Pclass <- as.factor(train_df$Pclass)
train_df$Survived <- as.factor(ifelse(train_df$Survived == 0, train_df$Survived <- "No", train_df$Survived <- "Yes"))
str(train_df)
test_df$Pclass <- as.factor(test_df$Pclass)
test_df$Embarked <- as.factor((test_df$Embarked))
test_df$Sex <- as.factor((test_df$Sex))
str(test_df)
# 결측값이 있는지 확인
sapply(test_df, FUN = function(x) {
sum(is.na(x))
})
sapply(train_df, FUN = function(x) {
sum(is.na(x))
})
# 결측값은 평균대치법을 활용
test_df$Age <- ifelse(is.na(test_df$Age) == TRUE, mean(test_df$Age, na.rm = TRUE), test_df$Age)
train_df$Age <- ifelse(is.na(train_df$Age) == TRUE, mean(train_df$Age, na.rm = TRUE), train_df$Age)
# 성별에 따른 생존여부
install.packages("ggplot2")
install.packages("ggplot")
library(ggplot2)
ggplot_sex <- ggplot(train_df, aes(x = Survived, fill = Sex)) + geom_bar() + ggtitle("성별에 따른 생존여부")
install.packages("ggplot2")
ggplotly(ggplot_data, height = 500, width=800)
install.packages("ggplot2")
install.packages("ggplot2")
# 결측값은 평균대치법을 활용
test_df$Age <- ifelse(is.na(test_df$Age) == TRUE, mean(test_df$Age, na.rm = TRUE), test_df$Age)
train_df$Age <- ifelse(is.na(train_df$Age) == TRUE, mean(train_df$Age, na.rm = TRUE), train_df$Age)
library(ggplot2)
ggplot_sex <- ggplot(train_df, aes(x = Survived, fill = Sex)) + geom_bar() + ggtitle("성별에 따른 생존여부")
ggplot_sex <- ggplot(train_df, aes(x = Survived, fill = Sex)) + geom_bar() + ggtitle("성별에 따른 생존여부")
ggplot_sex
ggplotly(ggplot_data, height = 500, width=800)
ggplot_sex <- ggplot(train_df, aes(x = Survived, y = Sex)) + geom_bar() + ggtitle("성별에 따른 생존여부")
ggplot_sex
ggplot_sex <- ggplot(train_df, aes(x = Survived, y = Sex)) + geom_bar() + ggtitle("성별에 따른 생존여부")
ggplot_sex
ggplotly(ggplot_data, height = 500, width=800)
ggplot_sex <- ggplot(train_df, aes(x = Survived, fill = Sex)) + geom_bar() + ggtitle("성별에 따른 생존여부")
ggplot_sex
ggplot_sex <- ggplot(train_df, aes(x = Survived, fill = Sex)) + hist() + ggtitle("성별에 따른 생존여부")
ggplot_sex
hist
ggplot_sex <- ggplot(train_df, aes(x = Survived, fill = Sex)) + hist() + ggtitle("성별에 따른 생존여부")
ggplot_sex <- ggplot(train_df, aes(x = Survived, fill = Sex)) + hist() + ggtitle("성별에 따른 생존여부")
ggplot_sex <- ggplot(train_df, aes(x = Survived, fill = Sex)) + geom_bar() + ggtitle("성별에 따른 생존여부")
ggplot_sex
ggplot_sex <- ggplot(train_df, aes(x = Survived, fill = Sex)) + geom_bar(stat='identity') + ggtitle("성별에 따른 생존여부")
ggplot_sex
ggplot_sex <- ggplot(train_df, aes(x = Survived, fill = Sex)) + geom_bar() + ggtitle("성별에 따른 생존여부")
ggplot_sex
ggplot_sex <- ggplot(train_df, aes(x = Survived, fill = Sex)) + geom_point() + ggtitle("성별에 따른 생존여부")
ggplot_sex
ggplot_sex <- ggplot(train_df, aes(x = Survived, fill = Sex)) + geom_point() + ggtitle("성별에 따른 생존여부")
ggplot_sex
ggplot_sex <- ggplot(train_df, aes(x = Survived, y = Sex)) + geom_point() + ggtitle("성별에 따른 생존여부")
ggplot_sex
ggplot_sex <- ggplot(train_df, aes(x = Survived, y = Sex)) + geom_point() + ggtitle("성별에 따른 생존여부")
ggplot_sex
ggplot_sex <- ggplot(train_df, aes(x = Survived, fill = Sex)) + geom_point() + ggtitle("성별에 따른 생존여부")
ggplot_sex
ggplot_sex <- ggplot(train_df, aes(x = Survived, fill = Sex)) + geom_point() + ggtitle("성별에 따른 생존여부")
ggplot_sex
ggplot_sex <- ggplot(train_df, aes(x = Survived, fill = Sex)) + geom_bar() + ggtitle("성별에 따른 생존여부")
ggplot_sex
ggplot_sex <- ggplot(train_df, aes(x = Survived, fill = Sex)) + geom_bar(size = 3) + ggtitle("성별에 따른 생존여부")
ggplot_sex
ggplot_sex <- ggplot(train_df, aes(x = Survived, fill = Sex)) + geom_bar(size = 20) + ggtitle("성별에 따른 생존여부")
ggplot_sex
ggplot_sex <- ggplot(train_df, aes(x = Survived, fill = Sex)) + geom_bar(size = 20, height=400) + ggtitle("성별에 따른 생존여부")
ggplot_sex
ggplot_sex <- ggplot(train_df, aes(x = Survived, fill = Sex)) + geom_bar(size = 20) + ggtitle("성별에 따른 생존여부")
ggplot_sex
ggplot_sex <- ggplot(train_df, aes(x = Survived, fill = Sex)) + geom_bar(size = 120) + ggtitle("성별에 따른 생존여부")
ggplot_sex
ggplot_sex <- ggplot(train_df, aes(x = Survived, fill = Sex)) + geom_bar(size = 20) + ggtitle("성별에 따른 생존여부")
ggplot_sex
ggplot_sex <- scale_x_discrete(expand = c(0.01, 0.01))
ggplot_sex
+ scale_x_discrete(expand = c(0.01, 0.01))
ggplot_sex
ggplot_sex <- ggplot(train_df, aes(x = Survived, fill = Sex)) + geom_bar(size = 20)
+ ggtitle("성별에 따른 생존여부")
+ scale_x_discrete(expand = c(0.01, 0.01))
ggplot_sex
ggplot_sex <- ggplot(train_df, aes(x = Survived, fill = Sex)) + geom_bar(size = 20)
+ ggtitle("성별에 따른 생존여부")
+ scale_x_discrete(expand = c(0.01, 0.01))
ggplot_sex <- ggplot(train_df, aes(x = Survived, fill = Sex)) + geom_bar(size = 20) + ggtitle("성별에 따른 생존여부") + scale_x_discrete(expand = c(0.01, 0.01))
ggplot_sex
ggplot_sex <- ggplot(train_df, aes(x = Survived, fill = Sex)) + geom_bar(size = 20) + ggtitle("성별에 따른 생존여부") + scale_x_discrete(expand = c(0.01, 0.01))
ggplot_sex
ggplot_sex <- ggplot(train_df, aes(x = Survived, fill = Sex)) + geom_bar(size = 20) + ggtitle("성별에 따른 생존여부") + scale_x_discrete(expand = c(0.5,0.5))
ggplot_sex
ggplot_sex <- ggplot(train_df, aes(x = Survived, fill = Sex)) + geom_bar(size = 20) + ggtitle("성별에 따른 생존여부") + scale_x_discrete(expand = c(0.5,0.5))
+   scale_y_continuous(expand = c(0.5,0.5))
+ scale_y_continuous(expand = c(0.5,0.5))
ggplot_sex <- ggplot(train_df, aes(x = Survived, fill = Sex)) + geom_bar(size = 20) + ggtitle("성별에 따른 생존여부") + scale_x_discrete(expand = c(0.5,0.5)) + scale_y_continuous(expand = c(0.5,0.5))
ggplot_sex
ggplot_sex <- ggplot(train_df, aes(x = Survived, fill = Sex)) + geom_bar(size = 20) + ggtitle("성별에 따른 생존여부") + scale_x_discrete(expand = c(0.5,0.5)) + scale_y_continuous(expand = c(0.2,0.2))
ggplot_sex
ggplot_sex <- ggplot(train_df, aes(x = Survived, fill = Sex)) + geom_bar(size = 20) + ggtitle("성별에 따른 생존여부") + scale_x_discrete(expand = c(0.5,0.5))
ggplot_sex
ggplot_sex <- ggplot(train_df, aes(x = Survived, fill = Sex)) + geom_bar(size = 20, title="성별에 따른 생존여부") +
scale_fill_manual()
ggplot_sex <- ggplot(train_df, aes(x = Survived, fill = Sex)) + geom_bar(size = 20, "성별에 따른 생존여부") +
scale_fill_manual()
ggplot_sex <- ggplot(train_df, aes(x = Survived, fill = Sex)) + geom_bar(size = 20, main="성별에 따른 생존여부") +
scale_fill_manual()
ggplot_sex <- ggplot(train_df, aes(x = Survived, fill = Sex)) + geom_bar(size = 20, main="성별에 따른 생존여부") +
scale_fill_manual()
ggplot_sex <- ggplot(train_df, aes(x = Survived, fill = Sex)) + geom_bar(size = 20") +
scale_fill_manual()
ggplot_sex
ggplotly(ggplot_data, height = 500, width=800)
ggplot_sex <- ggplot(train_df, aes(x = Survived, fill = Sex)) + geom_bar(size = 20) +
scale_fill_manual()
ggplot_sex
ggplot_sex <- ggplot(train_df, aes(x = Survived, fill = Sex)) + geom_bar(size = 20) +
scale_fill_manual()
ggplot_sex
# 결측값은 평균대치법을 활용
test_df$Age <- ifelse(is.na(test_df$Age) == TRUE, mean(test_df$Age, na.rm = TRUE), test_df$Age)
train_df$Age <- ifelse(is.na(train_df$Age) == TRUE, mean(train_df$Age, na.rm = TRUE), train_df$Age)
ggplot_sex <- ggplot(train_df, aes(x = Survived, fill = Sex)) + geom_bar(size = 20) +
scale_fill_manual()
ggplot_sex
ggplot_sex <- ggplot(train_df, aes(x = Survived, y= "사람수" ,fill = Sex)) + geom_bar(size = 20) +
scale_fill_manual()
ggplot_sex <- ggplot(train_df, aes(x = Survived, y= "사람수" ,fill = Sex)) + geom_bar(size = 20) +
scale_fill_manual()
ggplot_sex
ggplot_sex <- ggplot(train_df, aes(x = Survived, y= "peoples" ,fill = Sex)) + geom_bar(size = 20) +
scale_fill_manual()
ggplot_sex
ggplot_sex <- ggplot(train_df, aes(x = Survived, y= Survived.length ,fill = Sex)) + geom_bar(size = 20) +
scale_fill_manual()
ggplot_sex
ggplot_sex <- ggplot(train_df, aes(x = Survived, y= Survived.Length ,fill = Sex)) + geom_bar(size = 20) +
scale_fill_manual()
ggplot_sex
ggplot_sex <- ggplot(train_df, aes(x = Survived, y= Survived.Length.mean ,fill = Sex)) + geom_bar(size = 20) +
scale_fill_manual()
ggplot_sex
ggplot_sex <- ggplot(train_df, aes(x = Survived,fill = Sex)) + geom_bar(size = 20) +
scale_fill_manual()
ggplot_sex
ggplot_sex <- ggplot(train_df, aes(x = Survived,fill = Sex)) + geom_bar(size = 20) +
scale_fill_manual()
ggplot_sex
ggplot_sex <- ggplot(train_df, aes(x = Survived,fill = Sex)) + geom_bar(size = 20)
ggplot_sex
ggplot_sex <- ggplot(train_df, aes(x = Survived,fill = Sex)) + geom_bar(size = 10)
ggplot_sex
ggplot_sex <- ggplot(train_df, aes(x = Survived,fill = Sex)) + geom_bar(size = 10)
ggplot_sex
ggplot_sex <- ggplot(train_df, aes(x = Survived,fill = Sex)) + geom_bar(size = 10) +
theme_bw()
ggplot_sex
ggplot_sex <- ggplot(train_df, aes(x = Survived,fill = Sex)) + geom_bar(size = 10, width= .4) +
theme_bw()
ggplot_sex
ggplot_sex <- ggplot(train_df, aes(x = Survived,fill = Sex)) + geom_bar(size = 10, width= .6) +
theme_bw()
ggplot_sex
ggplot_sex <- ggplot(train_df, aes(x = Survived,fill = Sex)) + geom_bar(size = 10, width= .6, height = .4) +
theme_bw()
ggplot_sex
ggplot_sex <- ggplot(train_df, aes(x = Survived,fill = Sex)) + geom_bar(size = 10, width= .6, height=.4) +
theme_bw()
ggplot_sex
ggplot_sex <- ggplot(train_df, aes(x = Survived,fill = Sex)) + geom_bar(size = 10, width= .6) +
theme_bw()
ggplot_sex
ggplot_sex <- ggplot(train_df, aes(x = Survived,fill = Sex)) + geom_bar(size = 10, width= .6) +
theme_bw() +
scale_y_continuous(breaks=seq(0, 420, 30)) +
scale_x_continuous(breaks=seq(0, 420, 15))
ggplot_sex
ggplot_sex <- ggplot(train_df, aes(x = Survived,fill = Sex)) + geom_bar(size = 10, width= .6) +
theme_bw() + scale_y_continuous(breaks=seq(0, 420, 30)) + scale_x_continuous(breaks=seq(0, 420, 15))
ggplot_sex
ggplot_sex <- ggplot(train_df, aes(x = Survived,fill = Sex)) + geom_bar(size = 10, width= .6) +
theme_bw() + scale_y_continuous(breaks=seq(100, 420, 30)) + scale_x_continuous(breaks=seq(100, 420, 15))
ggplot_sex
ggplot_sex <- ggplot(train_df, aes(x = Survived,fill = Sex)) + geom_bar(size = 10, width= .6) +
theme_bw() + scale_y_continuous(breaks=seq(10, 420, 30)) + scale_x_continuous(breaks=seq(10, 420, 15))
ggplot_sex
ggplot_sex <- ggplot(train_df, aes(x = Survived,fill = Sex)) + geom_bar(size = 10, width= .6) +
theme_bw() + coord_fixed(ratio=1/2)
ggplot_sex
ggplot_sex <- ggplot(train_df, aes(x = Survived,fill = Sex)) + geom_bar(size = 10, width= .6) +
theme_bw() + coord_fixed(ratio=1/4)
ggplot_sex
ggplot_sex <- ggplot(train_df, aes(x = Survived,fill = Sex)) + geom_bar(size = 10, width= .6) +
theme_bw() + coord_fixed(ratio=1/10000)
ggplot_sex
ggplot_sex <- ggplot(train_df, aes(x = Survived,fill = Sex)) + geom_bar(size = 10, width= .6) +
theme_bw() + coord_fixed(ratio=1/1000)
ggplot_sex
ggplot_sex <- ggplot(train_df, aes(x = Survived,fill = Sex)) + geom_bar(size = 10, width= .6) +
theme_bw() + coord_fixed(ratio=1/100)
ggplot_sex
ggplot_sex <- ggplot(train_df, aes(x = Survived,fill = Sex)) + geom_bar(size = 10, width= .6) +
theme_bw() + coord_fixed(ratio=1/150)
ggplot_sex
ggplot_sex <- ggplot(train_df, aes(x = Survived,fill = Sex)) + geom_bar(size = 10, width= .6) +
theme_bw() + coord_fixed(ratio=1/250)
ggplot_sex
ggplot_sex <- ggplot(train_df, aes(x = Survived,fill = Sex)) + geom_bar(size = 10, width= .6) +
theme_bw() + coord_fixed(ratio=1/210)
ggplot_sex
install.packages("rpart")
library(rpart)
rpart_m <- rpart(Survived ~ Pclass + Age + Sex, data = train_df)
rpart_m
prp(rpart_m, type=4, extra = 2, digist = 3)
library(rpart)
prp(rpart_m, type=4, extra = 2, digits = 3)
library(rpart.plot)
install.packages("rpart.plot")
library(rpart.plot)
prp(rpart_m, type=4, extra = 2, digits = 3)
rpart_m <- rpart(Survived ~ Pclass + Age + Sex, data = train_df)
prp(rpart_m, type=4, extra=2, digits=3)
rf_m <- randomForest(Survived ~ pclass + Age + Sex, data = train_df)
library(rpart)
rf_m <- randomForest(Survived ~ pclass + Age + Sex, data = train_df)
rf_m <- rpart::randomForest(Survived ~ pclass + Age + Sex, data = train_df)
install.packages("RandomForest")
install.packages("randomForest")
install.packages("randomForest")
install.packages("randomForest")
library(randomForest)
library(randomForest)
rf_m <- randomForest(Survived ~ pclass + Age + Sex, data = train_df)
rf_m <- randomForest(Survived ~ Pclass + Age + Sex, data = train_df)
rf_m
rf_info <- randomForest(Survived ~ Sex + Age + Pclass, data = train_df, importance = T)
importance(rf_info)
rf_p <- predict(rf_m, newdata = test_df, type="class")
rf_p
rf_p <- as.data.frame()
rf_p <- as.data.frame(rf_p)
rf_p
Titanic_rpart <- data.frame(PassengerID = test_df$PassengerId, Survived = rpart_p)
Titanic_rpart <- data.frame(PassengerID = test_df$PassengerId, Survived = rf_p)
Titanic_rpart
write.csv(Titanic_rpart, file="Titanic_rpart.csv", row.names=FALSE)
# 랜덤 포레스트
Titanic_rf <- data.frame(PassengerID = test_set$PassengerId, Survived = rf_p)
# 랜덤 포레스트
Titanic_rf <- data.frame(PassengerID = test_df$PassengerId, Survived = rf_p)
write.csv(Titanic_rf, file="Titanic_randomForest.csv", row.names=FALSE)
getwd()
setwd("C:/Users/Samsung/Desktop/빅분기실기준비/타이타닉 생존자 예측")
list.files()
test_df <- read.csv("test.csv")
train_df <- read.csv("train.csv")
# 성별, 생존, Embarked(승선한 곳) facotr형으로 변환.
train_df$Sex <- as.factor(train_df$Sex)
train_df$Embarked <- as.factor(train_df$Embarked)
train_df$Pclass <- as.factor(train_df$Pclass)
train_df$Survived <- as.factor(ifelse(train_df$Survived == 0, train_df$Survived <- "No", train_df$Survived <- "Yes"))
str(train_df)
test_df$Pclass <- as.factor(test_df$Pclass)
test_df$Embarked <- as.factor((test_df$Embarked))
test_df$Sex <- as.factor((test_df$Sex))
str(test_df)
# 결측값이 있는지 확인
sapply(test_df, FUN = function(x) {
sum(is.na(x))
})
sapply(train_df, FUN = function(x) {
sum(is.na(x))
})
# 결측값은 평균대치법을 활용
test_df$Age <- ifelse(is.na(test_df$Age) == TRUE, mean(test_df$Age, na.rm = TRUE), test_df$Age)
train_df$Age <- ifelse(is.na(train_df$Age) == TRUE, mean(train_df$Age, na.rm = TRUE), train_df$Age)
sapply(train_df, FUN = function(x) {
sum(is.na(x))
})
# 결측값이 있는지 확인
sapply(test_df, FUN = function(x) {
sum(is.na(x))
})
ggplot_sex <- ggplot(train_df, aes(x = Survived,fill = Sex)) + geom_bar(size = 10, width= .6) +
theme_bw() + coord_fixed(ratio=1/210)
ggplot_sex <- ggplot(train_df, aes(x = Survived,fill = Sex)) + geom_bar(size = 10, width= .6) +
theme_bw() + coord_fixed(ratio=1/210)
# 성별에 따른 생존여부
install.packages("ggplot2")
install.packages("ggplot2")
library(ggplot2)
ggplot_sex <- ggplot(train_df, aes(x = Survived,fill = Sex)) + geom_bar(size = 10, width= .6) +
theme_bw() + coord_fixed(ratio=1/210)
ggplot_sex <- ggplot(train_df, aes(x = Survived,fill = Sex)) + geom_bar(size = 10, width= .6) +
theme_bw() + coord_fixed(ratio=1/210)
ggplot_sex
library(rpart)
library(rpart.plot)
library(randomForest)
# 랜덤포레스트
rf_m <- randomForest(Survived ~ Pclass + Age + Sex, data = train_df)
rf_M
rf_m
# 랜덤포레스트
randomfor <- randomForest(Survived ~ Pclass + Age + Sex, data = train_df)
randomfor
randomfor_info <- randomForest(Survived ~ Sex + Age + Pclass, data = train_df, importance = T)
importance(randomfor_info)
getwd()
setwd("C:/Users/Samsung/Desktop/빅분기실기준비/타이타닉 생존자 예측")
list.files()
test_df <- read.csv("test.csv")
train_df <- read.csv("train.csv")
# 성별, 생존, Embarked(승선한 곳) facotr형으로 변환.
train_df$Sex <- as.factor(train_df$Sex)
train_df$Embarked <- as.factor(train_df$Embarked)
train_df$Pclass <- as.factor(train_df$Pclass)
train_df$Survived <- as.factor(ifelse(train_df$Survived == 0, train_df$Survived <- "No", train_df$Survived <- "Yes"))
str(train_df)
test_df$Pclass <- as.factor(test_df$Pclass)
test_df$Embarked <- as.factor((test_df$Embarked))
test_df$Sex <- as.factor((test_df$Sex))
str(test_df)
# 결측값이 있는지 확인
sapply(test_df, FUN = function(x) {
sum(is.na(x))
})
sapply(train_df, FUN = function(x) {
sum(is.na(x))
})
# 결측값은 평균대치법을 활용
test_df$Age <- ifelse(is.na(test_df$Age) == TRUE, mean(test_df$Age, na.rm = TRUE), test_df$Age)
train_df$Age <- ifelse(is.na(train_df$Age) == TRUE, mean(train_df$Age, na.rm = TRUE), train_df$Age)
ggplot_sex <- ggplot(train_df, aes(x = Survived,fill = Sex)) + geom_bar(size = 10, width= .6) +
theme_bw() + coord_fixed(ratio=1/210)
ggplot_sex
# 랜덤포레스트
randomfor <- randomForest(Survived ~ Pclass + Age + Sex, data = train_df)
randomfor_info <- randomForest(Survived ~ Sex + Age + Pclass, data = train_df, importance = T)
importance(randomfor_info)
varImpPlot(randomfor_info)
randomfor_pre <- predict(randomfor, newdata = result_df, type="class")
randomfor_pre <- predict(randomfor, newdata = test_df, type="class")
randomfor_pre
Titanic_randomFor <- data.frame(ID = test_df$PassengerId, Survived = randomfor_pre)
Titanic_randomFor
write.csv(Titanic_randomFor, file="Titanic_randomFor.csv", row.names=FALSE)
write.csv(Titanic_randomFor, file="Titanic_randomFor.csv", row.names=FALSE)
Titanic_randomFor <- data.frame(PassengerId = test_df$PassengerId, Survived = randomfor_pre)
write.csv(Titanic_randomFor, file="Titanic_randomFor.csv", row.names=FALSE)
caret::confusionMatrix(data =df_pred$default, reference = df_test[,1])
refer_df <- read.csv("gender_submission.csv")
refer_df
head(gender_submission)
head(refer_df)
caret::confusionMatrix(data =randomfor_pre$Survived, reference = refer_df[,1])
refer_df <- as.data.frame(refer_df)
caret::confusionMatrix(data =randomfor_pre$Survived, reference = refer_df[,1])
caret::confusionMatrix(data =randomfor_pre, reference = refer_df])
caret::confusionMatrix(data =randomfor_pre, reference = refer_df)
refer_df <- as.data.frame(refer_df)
caret::confusionMatrix(data = randomfor_pre, reference = refer_df)
caret::confusionMatrix(data = Titanic_randomFor, reference = refer_df)
Titanic_randomFor
refer_df
head(Titanic_randomFor)
head(refer_df)
refer_df <- as.factor(refer_df)
refer_df
refer_df <- as.data.frame(refer_df)
str(refer_df)
refer_df$Survived <- as.factor(ifelse(refer_df$Survived == 0, refer_df$Survived <- "No", refer_df$Survived <- "Yes"))
refer_df <- read.csv("gender_submission.csv")
refer_df$Survived <- as.factor(ifelse(refer_df$Survived == 0, refer_df$Survived <- "No", refer_df$Survived <- "Yes"))
head(refer_df)
caret::confusionMatrix(data = Titanic_randomFor, reference = refer_df)
dim(refer_df)
dim(Titanic_randomFor)
caret::confusionMatrix(data = Titanic_randomFor, reference = refer_df)
levels(refer_df)
levels(refer_df$Survived)
levels(refer_df$Survived)
levels(Titanic_randomFor$Survived)
levels(refer_df$PassengerId)
levels(Titanic_randomFor$PassengerId)
refer_df[,1]
refer_df[,2]
caret::confusionMatrix(data = Titanic_randomFor$Survived, reference = refer_df[,2])
caret::confusionMatrix(data = Titanic_randomFor$Survived, reference = refer_df[,2])
write.csv(Titanic_randomFor, file="Titanic_randomFor.csv", row.names=FALSE)
caret::confusionMatrix(data = Titanic_randomFor$PassengerId, reference = refer_df[,1])
write.csv(Titanic_randomFor, file="Titanic_randomFor.csv", row.names=FALSE)
caret::confusionMatrix(data = Titanic_randomFor$PassengerId, reference = refer_df[,1])
caret::confusionMatrix(data = Titanic_randomFor$Survived, reference = refer_df[,2])
refer_df <- read.csv("gender_submission.csv")
# 성별, 생존, Embarked(승선한 곳) facotr형으로 변환.
train_df$Sex <- as.factor(train_df$Sex)
train_df$Embarked <- as.factor(train_df$Embarked)
train_df$Pclass <- as.factor(train_df$Pclass)
train_df$Survived <- as.factor(train_df$Survived)
str(train_df)
getwd()
setwd("C:/Users/Samsung/Desktop/빅분기실기준비/타이타닉 생존자 예측")
list.files()
test_df <- read.csv("test.csv")
train_df <- read.csv("train.csv")
# 성별, 생존, Embarked(승선한 곳) facotr형으로 변환.
train_df$Sex <- as.factor(train_df$Sex)
train_df$Embarked <- as.factor(train_df$Embarked)
train_df$Pclass <- as.factor(train_df$Pclass)
train_df$Survived <- as.factor(train_df$Survived)
str(train_df)
# 성별, 생존, Embarked(승선한 곳) facotr형으로 변환.
train_df$Sex <- as.factor(train_df$Sex)
train_df$Embarked <- as.factor(train_df$Embarked)
train_df$Pclass <- as.factor(train_df$Pclass)
train_df$Survived <- as.factor(train_df$Survived)
str(train_df)
test_df$Pclass <- as.factor(test_df$Pclass)
test_df$Embarked <- as.factor((test_df$Embarked))
test_df$Sex <- as.factor((test_df$Sex))
str(test_df)
# 결측값이 있는지 확인
sapply(test_df, FUN = function(x) {
sum(is.na(x))
})
sapply(train_df, FUN = function(x) {
sum(is.na(x))
})
# 결측값은 평균대치법을 활용
test_df$Age <- ifelse(is.na(test_df$Age) == TRUE, mean(test_df$Age, na.rm = TRUE), test_df$Age)
train_df$Age <- ifelse(is.na(train_df$Age) == TRUE, mean(train_df$Age, na.rm = TRUE), train_df$Age)
sum(is.na(x))
# 결측값이 있는지 확인
sapply(test_df, FUN = function(x) {
sum(is.na(x))
})
sapply(train_df, FUN = function(x) {
sum(is.na(x))
})
# 결측값은 평균대치법을 활용
test_df$Age <- ifelse(is.na(test_df$Age) == TRUE, mean(test_df$Age, na.rm = TRUE), test_df$Age)
train_df$Age <- ifelse(is.na(train_df$Age) == TRUE, mean(train_df$Age, na.rm = TRUE), train_df$Age)
ggplot_sex <- ggplot(train_df, aes(x = Survived,fill = Sex)) + geom_bar(size = 10, width= .6) +
theme_bw() + coord_fixed(ratio=1/210)
ggplot_sex
# 랜덤포레스트
randomfor <- randomForest(Survived ~ Pclass + Age + Sex, data = train_df)
randomfor_info <- randomForest(Survived ~ Sex + Age + Pclass, data = train_df, importance = T)
importance(randomfor_info)
varImpPlot(randomfor_info)
randomfor_pre <- predict(randomfor, newdata = test_df, type="class")
Titanic_randomFor <- data.frame(PassengerId = test_df$PassengerId, Survived = randomfor_pre)
Titanic_randomFor
refer_df <- read.csv("gender_submission.csv")
caret::confusionMatrix(data = Titanic_randomFor$Survived, reference = refer_df[,2])
levels(refer_df$Survived)
refer_df$Survived <- as.factor(refer_df$Survived)
levels(refer_df$Survived)
caret::confusionMatrix(data = Titanic_randomFor$Survived, reference = refer_df[,2])
write.csv(Titanic_randomFor, file="Titanic_randomFor.csv", row.names=FALSE)
# 랜덤포레스트
randomfor <- randomForest(Survived ~ Pclass + Age + Sex, data = train_df)
randomfor_info <- randomForest(Survived ~ Sex + Age + Pclass, data = train_df, importance = T)
importance(randomfor_info)
randomfor_pre <- predict(randomfor, newdata = test_df, type="class")
randomfor_pre
Titanic_randomFor <- data.frame(PassengerId = test_df$PassengerId, Survived = randomfor_pre)
Titanic_randomFor
randomfor_pre <- predict(randomfor, newdata = test_df, type="dataframe")
randomfor_pre <- predict(randomfor, newdata = test_df, type="response")
Titanic_randomFor <- data.frame(PassengerId = test_df$PassengerId, Survived = randomfor_pre)
Titanic_randomFor
Titanic_randomFor
head(Titanic_randomFor)
varImpPlot(randomfor_info)
caret::confusionMatrix(data = Titanic_randomFor$Survived, reference = refer_df[,2])
